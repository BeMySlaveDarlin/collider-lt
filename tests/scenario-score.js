import http from 'k6/http';
import { sleep } from 'k6';
import { Counter, Rate, Trend, Gauge } from 'k6/metrics';
import { check } from 'k6';
import { BASE_URL, generateEventPayload, getRandomUserId } from '../utils/helpers.js';

// –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å–∫–æ—Ä–∏–Ω–≥–∞
const overallScore = new Gauge('overall_score');
const createScore = new Gauge('create_score');
const readScore = new Gauge('read_score');
const stabilityScore = new Gauge('stability_score');
const performanceScore = new Gauge('performance_score');

const operationCounts = new Counter('operation_counts');
const operationErrors = new Counter('operation_errors');
const operationSuccesses = new Counter('operation_successes');
const operationDurations = new Trend('operation_durations', true);

export const options = {
	thresholds: {
		'http_req_duration': ['p(95)<150', 'p(99)<400'],
		'http_req_failed': ['rate<0.02'],
		'overall_score': ['value>80'],
		'create_score': ['value>70'],
		'read_score': ['value>85'],
		'stability_score': ['value>80'],
		'performance_score': ['value>75'],
	},
	scenarios: {
		score_test: {
			executor: 'ramping-vus',
			startVUs: 0,
			stages: [
				{ duration: '1m', target: 50 },     // –†–∞–∑–æ–≥—Ä–µ–≤
				{ duration: '3m', target: 200 },    // –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
				{ duration: '2m', target: 400 },    // –ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
				{ duration: '2m', target: 200 },    // –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è
				{ duration: '1m', target: 0 },      // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
			],
		},
	},
};

export default function() {
	const operation = getWeightedOperation();

	switch(operation) {
		case 'create':
			performCreate();
			break;
		case 'read':
			performRead();
			break;
	}
}

function getWeightedOperation() {
	const rand = Math.random();
	if (rand < 0.70) return 'read';     // 70% —á—Ç–µ–Ω–∏–µ
	return 'create';                    // 30% —Å–æ–∑–¥–∞–Ω–∏–µ
}

function performCreate() {
	const payload = generateEventPayload();
	const startTime = Date.now();

	const params = {
		headers: { 'Content-Type': 'application/json' },
		tags: { operation: 'create', endpoint: 'create_event' },
	};

	const response = http.post(`${BASE_URL}/event`, JSON.stringify(payload), params);
	const duration = Date.now() - startTime;

	const success = check(response, {
		'create: status is 201': (r) => r.status === 201,
		'create: response time < 100ms': (r) => r.timings.duration < 100,
		'create: has valid response': (r) => r.body.length > 0,
	});

	operationCounts.add(1, { operation: 'create' });
	operationDurations.add(duration, { operation: 'create' });

	if (success) {
		operationSuccesses.add(1, { operation: 'create' });
	} else {
		operationErrors.add(1, { operation: 'create' });
	}
}

function performRead() {
	const readType = Math.floor(Math.random() * 3);
	let url, endpointName;
	const startTime = Date.now();

	switch(readType) {
		case 0:
			const page = Math.floor(Math.random() * 50) + 1;
			const limit = [10, 50, 100][Math.floor(Math.random() * 3)];
			url = `${BASE_URL}/events?page=${page}&limit=${limit}`;
			endpointName = 'get_events';
			break;

		case 1:
			const userId = getRandomUserId();
			url = `${BASE_URL}/users/${userId}/events?limit=1000`;
			endpointName = 'get_user_events';
			break;

		case 2:
			const statsLimit = [3, 5, 10][Math.floor(Math.random() * 3)];
			url = `${BASE_URL}/stats?limit=${statsLimit}`;
			endpointName = 'get_stats';
			break;
	}

	const params = {
		tags: { operation: 'read', endpoint: endpointName },
	};

	const response = http.get(url, params);
	const duration = Date.now() - startTime;

	const success = check(response, {
		'read: status is 200': (r) => r.status === 200,
		'read: response time < 50ms': (r) => r.timings.duration < 50,
		'read: has data': (r) => r.body.length > 0,
	});

	operationCounts.add(1, { operation: 'read' });
	operationDurations.add(duration, { operation: 'read' });

	if (success) {
		operationSuccesses.add(1, { operation: 'read' });
	} else {
		operationErrors.add(1, { operation: 'read' });
	}
}

export function handleSummary(data) {
	// –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	const totalRequests = data.metrics.http_reqs.values.count;
	const errorRate = data.metrics.http_req_failed.values.rate;
	const avgDuration = data.metrics.http_req_duration.values.avg;
	const p95Duration = data.metrics.http_req_duration.values['p(95)'];
	const rps = data.metrics.http_reqs.values.rate;

	// –°–∫–æ—Ä —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ (0-100) - –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ error rate –∏ P95
	const stabilityScoreValue = Math.max(0, 100 - (errorRate * 2000) - Math.max(0, (p95Duration - 100) / 5));

	// –°–∫–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ create –æ–ø–µ—Ä–∞—Ü–∏–π (0-100) - –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ RPS –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
	const createRpsScore = Math.min(100, (rps * 0.7 / 60)); // 6000 RPS = 100 points
	const createTimeScore = Math.max(0, 100 - avgDuration); // < 100ms = max points
	const createScoreValue = (createRpsScore + createTimeScore) / 2;

	// –°–∫–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ read –æ–ø–µ—Ä–∞—Ü–∏–π (0-100) - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ
	const readRpsScore = Math.min(100, (rps * 0.7 / 80)); // 8000 RPS = 100 points
	const readTimeScore = Math.max(0, 100 - (avgDuration * 2)); // < 50ms = max points
	const readScoreValue = (readRpsScore + readTimeScore) / 2;

	// –û–±—â–∏–π —Å–∫–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	const performanceScoreValue = Math.min(100, rps / 60); // 6000 RPS = 100 points

	// –û–±—â–∏–π —Å–∫–æ—Ä (–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞)
	const overallScoreValue = (
		stabilityScoreValue * 0.25 +    // 25% —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
		createScoreValue * 0.25 +       // 25% create –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
		readScoreValue * 0.25 +         // 25% read –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
		performanceScoreValue * 0.25    // 25% –æ–±—â–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
	);

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ thresholds
	overallScore.add(overallScoreValue);
	createScore.add(createScoreValue);
	readScore.add(readScoreValue);
	stabilityScore.add(stabilityScoreValue);
	performanceScore.add(performanceScoreValue);

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
	let rating;
	if (overallScoreValue >= 95) rating = 'A+ (–ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π - 6000+ RPS)';
	else if (overallScoreValue >= 85) rating = 'A (–û—Ç–ª–∏—á–Ω—ã–π - 4000+ RPS)';
	else if (overallScoreValue >= 75) rating = 'B (–•–æ—Ä–æ—à–∏–π - 2000+ RPS)';
	else if (overallScoreValue >= 65) rating = 'C (–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π - 1000+ RPS)';
	else if (overallScoreValue >= 50) rating = 'D (–ü–ª–æ—Ö–æ–π - <1000 RPS)';
	else rating = 'F (–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã)';

	return {
		'results/score-summary.json': JSON.stringify({
			...data,
			scores: {
				overall: overallScoreValue,
				create: createScoreValue,
				read: readScoreValue,
				stability: stabilityScoreValue,
				performance: performanceScoreValue,
				rating: rating,
				rps: rps,
				avgDuration: avgDuration,
				p95Duration: p95Duration,
				errorRate: errorRate * 100
			}
		}),
		stdout: `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                     LOAD TEST (SCORE)                       ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë –û–ë–©–ò–ô –†–ï–ô–¢–ò–ù–ì: ${rating}
‚ïë 
‚ïë –°–ö–û–†–´ (0-100):
‚ïë   üìä –û–±—â–∏–π —Å–∫–æ—Ä: ${overallScoreValue.toFixed(1)}
‚ïë   ‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${performanceScoreValue.toFixed(1)}
‚ïë   ‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: ${stabilityScoreValue.toFixed(1)}
‚ïë   üìù Create –æ–ø–µ—Ä–∞—Ü–∏–∏: ${createScoreValue.toFixed(1)}
‚ïë   üìñ Read –æ–ø–µ—Ä–∞—Ü–∏–∏: ${readScoreValue.toFixed(1)}
‚ïë
‚ïë –ú–ï–¢–†–ò–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:
‚ïë   üöÄ RPS: ${rps.toFixed(0)} (Target: 6000+)
‚ïë   ‚è±Ô∏è  Avg Response: ${avgDuration.toFixed(1)}ms
‚ïë   üìà P95 Response: ${p95Duration.toFixed(1)}ms
‚ïë   ‚ùå Error Rate: ${(errorRate * 100).toFixed(2)}%
‚ïë   üì¶ Total Requests: ${totalRequests}
‚ïë
‚ïë –§–û–†–ú–£–õ–ê –°–ö–û–†–ò–ù–ì–ê:
‚ïë   ‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: RPS/60 (6000 RPS = 100 pts)
‚ïë   ‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: 100 - errors*2000 - latency_penalty
‚ïë   ‚Ä¢ Create: (RPS_score + time_score) / 2
‚ïë   ‚Ä¢ Read: (RPS_score + time_score) / 2  
‚ïë   ‚Ä¢ –û–±—â–∏–π: weighted average (25% –∫–∞–∂–¥—ã–π)
‚ïë
‚ïë –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
‚ïë   ${overallScoreValue < 75 ? 'üîß –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ë–î/–∫–µ—à–∞' : '‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç–ª–∏—á–Ω–∞—è'}
‚ïë   ${errorRate > 0.02 ? 'üîß –°–Ω–∏–∑–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫' : '‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ö–æ—Ä–æ—à–∞—è'}
‚ïë   ${p95Duration > 150 ? 'üîß –£–ª—É—á—à–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞' : '‚úÖ –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –ø—Ä–∏–µ–º–ª–µ–º–æ–µ'}
‚ïë   ${rps < 3000 ? 'üîß –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É' : '‚úÖ RPS –≤ –Ω–æ—Ä–º–µ'}
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    `,
	};
}
